{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","userMessage","target","value","handleSubmit","preventDefault","state","trim","msg","text","user","conversation","concat","toConsumableArray","fetch","method","headers","Content-Type","body","JSON","stringify","message","_this2","Pusher","cluster","encrypted","subscribe","bind","data","console","log","chat","map","e","index","i","className","react_default","a","createElement","key","onSubmit","onInput","type","autoFocus","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAgGeA,qBA3Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA0BRQ,aAAe,SAAAC,GACbR,EAAKS,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SA5BzBZ,EA+BnBa,aAAe,SAAAL,GAEb,GADAA,EAAMM,iBACDd,EAAKe,MAAML,YAAYM,OAA5B,CAEA,IAAMC,EAAM,CACVC,KAAMlB,EAAKe,MAAML,YACjBS,KAAM,SAGRnB,EAAKS,SAAS,CACZW,aAAY,GAAAC,OAAApB,OAAAqB,EAAA,EAAArB,CAAMD,EAAKe,MAAMK,cAAjB,CAA+BH,MAG7CM,MAAM,6BAA8B,CAClCC,OAAQ,OACRC,QAAS,CAAEC,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBC,QAAS9B,EAAKe,MAAML,gBAIxBV,EAAKS,SAAS,CAAEC,YAAa,OAlD7BV,EAAKe,MAAQ,CACXL,YAAa,GACbU,aAAc,IAJCpB,mFAQC,IAAA+B,EAAA5B,KACH,IAAI6B,IAAO,uBAAwB,CAChDC,QAAS,MACTC,WAAW,IAGUC,UAAU,OACzBC,KAAK,eAAgB,SAAAC,GAC3B,IAAMpB,EAAM,CACVC,KAAMmB,EAAKP,QACXX,KAAM,MAERY,EAAKtB,SAAS,CACZW,aAAY,GAAAC,OAAApB,OAAAqB,EAAA,EAAArB,CAAM8B,EAAKhB,MAAMK,cAAjB,CAA+BH,QAG/CqB,QAAQC,IAAI,+DAgCZ,IAQMC,EAAOrC,KAAKY,MAAMK,aAAaqB,IAAI,SAACC,EAAGC,GAAJ,OARrBzB,EASPwB,EAAExB,KATW0B,EASLD,EATQE,EASDH,EAAEvB,KAP1B2B,EAAAC,EAAAC,cAAA,OAAKC,IAAG,GAAA5B,OAAKwB,EAAL,KAAAxB,OAAkBuB,GAAKC,UAAS,GAAAxB,OAAKwB,EAAL,iBACtCC,EAAAC,EAAAC,cAAA,QAAMH,UAAU,gBAAgB3B,IAHnB,IAACA,EAAM0B,EAAGC,IAY7B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKH,UAAU,eACbC,EAAAC,EAAAC,cAAA,OAAKH,UAAU,qBAAqBL,GACpCM,EAAAC,EAAAC,cAAA,OAAKH,UAAU,eACbC,EAAAC,EAAAC,cAAA,QAAME,SAAU/C,KAAKU,cACnBiC,EAAAC,EAAAC,cAAA,SACEpC,MAAOT,KAAKY,MAAML,YAClByC,QAAShD,KAAKI,aACdsC,UAAU,aACVO,KAAK,OACLC,WAAS,EACTC,YAAY,uDAlFVC,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bb022ff8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Pusher from \"pusher-js\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userMessage: \"\",\n      conversation: []\n    };\n  }\n\n  componentDidMount() {\n    const pusher = new Pusher(\"d579cf807d6c90b40669\", {\n      cluster: \"ap1\",\n      encrypted: true\n    });\n\n    const channel = pusher.subscribe(\"bot\");\n    channel.bind(\"bot-response\", data => {\n      const msg = {\n        text: data.message,\n        user: \"ai\"\n      };\n      this.setState({\n        conversation: [...this.state.conversation, msg]\n      });\n    });\n    console.log(\"finished componentDidMount\");\n  }\n\n  handleChange = event => {\n    this.setState({ userMessage: event.target.value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    if (!this.state.userMessage.trim()) return;\n\n    const msg = {\n      text: this.state.userMessage,\n      user: \"human\"\n    };\n\n    this.setState({\n      conversation: [...this.state.conversation, msg]\n    });\n\n    fetch(\"http://localhost:5000/chat\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        message: this.state.userMessage\n      })\n    });\n\n    this.setState({ userMessage: \"\" });\n  };\n\n  render() {\n    const ChatBubble = (text, i, className) => {\n      return (\n        <div key={`${className}-${i}`} className={`${className} chat-bubble`}>\n          <span className=\"chat-content\">{text}</span>\n        </div>\n      );\n    };\n\n    const chat = this.state.conversation.map((e, index) =>\n      ChatBubble(e.text, index, e.user)\n    );\n\n    return (\n      <div>\n        <h1>Chatbot</h1>\n        <div className=\"chat-window\">\n          <div className=\"conversation-view\">{chat}</div>\n          <div className=\"message-box\">\n            <form onSubmit={this.handleSubmit}>\n              <input\n                value={this.state.userMessage}\n                onInput={this.handleChange}\n                className=\"text-input\"\n                type=\"text\"\n                autoFocus\n                placeholder=\"Type your message and hit Enter to send\"\n              />\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}